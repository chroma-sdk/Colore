name: CI

on:
  push:
    branches:
      - '**'
      - '!gh-pages'
    tags:
      - '*'
  pull_request:
    branches:
      - '**'
      - '!gh-pages'

env:
  COLORE_DOTNET_VERSION_SPEC: '3.1.x'

jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: 'Cache: NuGet'
      uses: actions/cache@v2
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: 'Cache: Cake'
      uses: actions/cache@v2
      with:
        path: tools
        key: ${{ runner.os }}-cake-${{ hashFiles('build.cake') }}
        restore-keys: |
          ${{ runner.os }}-cake-

    - name: 'Install DocFx'
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install docfx

    - name: Cake
      id: cake
      uses: cake-build/cake-action@v1
      with:
        target: GitHub
        verbosity: Diagnostic

    - name: Upload Coverage to Codecov
      id: codecov
      uses: codecov/codecov-action@v2
      with:
        files: 'artifacts/coverage.xml'
        fail_ci_if_error: true
        verbose: true

    - name: Upload test coverage files
      uses: actions/upload-artifact@v2
      with:
        name: test-coverage
        path: 'artifacts/*coverage*'
    - name: Upload Colore AnyCPU zip packages
      uses: actions/upload-artifact@v2
      with:
        name: zips
        path: 'artifacts/colore_*_anycpu.zip'
    - name: Upload Colore Full zip packages
      uses: actions/upload-artifact@v2
      with:
        name: zips
        path: 'artifacts/colore_*_full.zip'
    - name: Upload Colore docs zip
      uses: actions/upload-artifact@v2
      with:
        name: zips
        path: 'artifacts/colore_*_docs.zip'
    - name: Upload Colore nupkg files to NuGet artifact
      uses: actions/upload-artifact@v2
      with:
        name: nuget
        path: 'artifacts/nuget/*.nupkg'
    - name: Upload Colore snupkg files to NuGet artifact
      uses: actions/upload-artifact@v2
      with:
        name: nuget
        path: 'artifacts/nuget/*.snupkg'
  publish-nuget:
    name: Publish NuGet packages
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - name: Download NuGet packages
      uses: actions/download-artifact@v2
      with:
        name: nuget
        path: nuget
    - name: Push NuGet packages to GitHub feed
      run: |
        dotnet nuget push nuget/*.nupkg \
          --source https://nuget.pkg.github.com/chroma-sdk/index.json \
          --api-key ${GITHUB_TOKEN} \
          --skip-duplicate
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Push NuGet packages to NuGet feed
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        dotnet nuget push nuget/*.nupkg \
          --source https://api.nuget.org/v3/index.json \
          --api-key ${NUGET_API_KEY} \
          --skip-duplicate
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
  create-release:
    name: Create release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download Colore zips
      uses: actions/download-artifact@v2
      with:
        name: zips
        path: zips
    - name: Download Coverage data
      uses: actions/download-artifact@v2
      with:
        name: test-coverage
        path: coverage
    - name: Download NuGet packages
      uses: actions/download-artifact@v2
      with:
        name: nuget
        path: nuget
    - name: Create GitHub release
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        prerelease: ${{ contains(github.ref, '-') }}
        body: Automatically created by GitHub Actions.
        files: |
          zips/*
          nuget/*
          coverage/colore_*_coverage.zip
  publish-docs:
    name: Publish docs
    needs: build
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v'))
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Download Colore zips
      uses: actions/download-artifact@v2
      with:
        name: zips
        path: zips
    - name: Download coverage files
      uses: actions/download-artifact@v2
      with:
        name: test-coverage
        path: coverage
    - name: Unzip zips
      run: |
        mkdir -p src/docs
        mkdir src/coverage
        unzip zips/colore_*_docs.zip -d src/docs
        unzip coverage/colore_*_coverage.zip -d src/coverage
    - name: Set destination paths
      id: dest
      run: |
        if [ "$IS_RC" == "true" ]; then
          prefix='rc'
        elif [ "$IS_TAG" == "true" ]; then
          prefix=''
        else
          prefix='dev'
        fi
        echo "::set-output name=docs_dest::${prefix}docs"
        echo "::set-output name=coverage_dest::${prefix}coverage"
        echo "::set-output name=timestamp::$(date --iso-8601=seconds)"
      env:
        IS_TAG: ${{ startsWith(github.ref, 'refs/tags/v') }}
        IS_RC: ${{ startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-')}}
    - name: Deploy docs
      uses: JamesIves/github-pages-deploy-action@4.1.5
      with:
        branch: gh-pages
        folder: src/docs
        git-config-name: GitHub Actions
        git-config-email: github-actions@noreply.github.com
        target-folder: ${{ steps.dest.outputs.docs_dest }}
        commit-message: |
          [AUTOMATED] Documentation update

          Timestamp: ${{ steps.dest.outputs.timestamp }}
          From commit ${{ github.sha }}
          Target: ${{ steps.dest.outputs.docs_dest }}
        clean: true
    - name: Deploy coverage
      uses: JamesIves/github-pages-deploy-action@4.1.5
      with:
        branch: gh-pages
        folder: src/coverage
        git-config-name: GitHub Actions
        git-config-email: github-actions@noreply.github.com
        target-folder: ${{ steps.dest.outputs.coverage_dest }}
        commit-message: |
          [AUTOMATED] Coverage update

          Timestamp: ${{ steps.dest.outputs.timestamp }}
          From commit ${{ github.sha }}
          Target: ${{ steps.dest.outputs.coverage_dest }}
        clean: true
